{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["globalSeconds","breakS","breakM","Event","Pomodoro","props","state","session","break","sec","breakSec","increment","bind","decrement","incBreak","decBreak","reset","ss","count","brCount","bs","final","event","this","setState","clearInterval","e","window","setInterval","ti","m","className","id","onClick","src","React","Component","ReactDOM","render","document","getElementById","Boolean","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d161c16d.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n\nlet globalSeconds = 0;\nlet breakS = 0;\nlet event = new Event('secTimer');\n\nlet breakM = 0; //marked for deletion\n\n\n\nfunction ti (e) {\n  if (globalSeconds === 0) {\n    return globalSeconds = window.setInterval(e, 1000)\n   }\n\n   clearInterval(globalSeconds)\n   globalSeconds = 0;\n  }\n  \n  \nfunction br (e, m) {\n  if (breakS === 0) {\n    return breakS = window.setInterval(e, 1000)\n   }\n   \n   if (breakM === 0) { //marked for deletion, some weird error\n    return breakM = window.setInterval(m, 60000)\n  }\n\n  clearInterval(breakS)\n  breakS = 0;\n  } \n\n\n\n\nclass Pomodoro extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state= {\n      session: 1500,\n      break: 300,\n      sec: 1500,\n      breakSec: 300\n    }\n    \n    \n    this.increment = this.increment.bind(this);\n    this.decrement = this.decrement.bind(this);\n    this.incBreak = this.incBreak.bind(this);\n    this.decBreak = this.decBreak.bind(this);\n    this.reset = this.reset.bind(this);\n    this.ss = this.ss.bind(this);\n    this.count = this.count.bind(this);\n    this.brCount = this.brCount(this)\n    this.bs = this.bs.bind(this);\n    this.final = this.final.bind(this)\n    }\n\n \n  increment(event) {\n    if(this.state.session <= 3540)\n    this.setState({ \n      session: this.state.session + 60,\n      sec: this.state.sec + 60\n     })\n  }\n\n  \n  decrement(event) {\n    if(this.state.session >=120)\n      this.setState({ \n        session: this.state.session - 60,\n        sec: this.state.sec - 60\n       })\n  }\n\n  incBreak(event) {\n    if(this.state.break <= 3540)\n      this.setState({ \n        break: this.state.break + 60,\n        breakSec: this.state.breakSec + 60\n      })\n  }\n\n  decBreak(event) {\n    if(this.state.break >=120)\n    this.setState({\n      break: this.state.break - 60,\n      breakSec: this.state.breakSec - 60\n    })\n  }\n\n  reset(event) {\n    this.setState({\n      session: 1500,\n      break: 300,\n      sec: 1500,\n      breakSec: 300\n    })\n\n    clearInterval(globalSeconds)\n    globalSeconds = 0;\n    clearInterval(breakS)\n    breakS = 0;\n    }\n \n\n  ss(event) {\n    \n    if (this.state.sec > -1)\n          this.setState({ sec: this.state.sec - 1 });  \n    }\n\n  bs(event) {\n    if (this.state.breakSec > 0)\n      this.setState({ breakSec: this.state.breakSec - 1 }); \n  }\n\n  \n\n  \n  count(event) { \n    ti(this.ss)  \n    //br(this.bs)\n\n    //this.setState({ sec: this.state.session })\n  \n  }\n\n  final(event) {\n    br(this.bs)\n  }\n\n\n  render() {\n    return (\n      \n        <div className=\"container-fluid\">\n        \n        <h1>Pomodoro Clock</h1>  \n        <div id=\"start_stop\" onClick={this.count}>&#x25B6;&#x23f8;</div> <br />\n        <h3>{this.state.breakSec}</h3>\n        \n        \n        <div id=\"conBox\">\n        <div id='timer-label'>{this.state.sec !== -1? \"Session\" : \"Break\"}\n        <audio src=\"src\\Clock.m4a\" id=\"beep\"></audio>\n    <div id='time-left'>\n      {this.state.sec !==-1? \n        <div id=\"ses\">\n          {((this.state.sec - (this.state.sec % 60))/60) <10? \n          '0'+ (this.state.sec - (this.state.sec % 60))/60 : (this.state.sec - (this.state.sec % 60))/60}\n          :\n          {(this.state.sec % 60) < 10? \n          '0'+this.state.sec % 60: this.state.sec % 60}\n      </div> : <div>\n      {((this.state.breakSec - (this.state.breakSec % 60))/60) <10? \n          '0'+ (this.state.breakSec - (this.state.breakSec % 60))/60 : (this.state.breakSec - (this.state.breakSec % 60))/60}\n          :\n          {(this.state.breakSec % 60) < 10? \n          '0'+this.state.breakSec % 60: this.state.breakSec % 60}\n          \n      </div>}\n      \n    </div>\n    \n        </div>\n        </div>\n        <div id=\"reset\" onClick={this.reset}>&#8634;</div>\n        \n        <div className=\"row\">\n          <div className='col' >\n            \n            \n          </div>\n          <div className='col-xl-3'>\n        <div id=\"session-label\">Session Length</div>\n        \n        <span id=\"session-decrement\" className=\"but btn btn-light\" onClick={this.decrement}> &#9664;</span>  &nbsp;\n        <span id=\"session-length\">{this.state.session/60}</span>  &nbsp;\n        <span id=\"session-increment\" className=\"but btn btn-light\" onClick={this.increment}>&#9658; </span>\n        \n        </div>\n        \n\n        <div className='col-xl-3'>\n        <div id=\"break-label\">Break Length</div>\n        \n        <span id=\"break-decrement\" className=\"but btn btn-light\" onClick={this.decBreak}> &#9664; </span> &nbsp;\n        <span id=\"break-length\">{this.state.break/60}</span> &nbsp;\n        <span id=\"break-increment\" className=\"but btn btn-light\" onClick={this.incBreak}>  &#9658; </span>\n        </div>\n        <div className='col' />\n        </div>\n\n        </div>\n\n      \n    )\n  }\n}\n\nReactDOM.render(<Pomodoro />, document.getElementById('root'))\nexport default Pomodoro;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(\n  \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}